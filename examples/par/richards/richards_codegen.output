    |\^/|     Maple 2016 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2016
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> restart;
# hydraulic conductivity and its derivatives
> hydcon:=psi->ks*(1-(alpha*psi)^(n-1)*(1+(alpha*psi)^n)^(-m))^2/(1+(alpha*psi)^n)^(m/2);
                                          (n - 1)                 n (-m) 2
                       ks (1 - (alpha psi)        (1 + (alpha psi) )    )
      hydcon := psi -> ---------------------------------------------------
                                                     n (m/2)
                                     (1 + (alpha psi) )

> dhydco:=D(hydcon);
                                                                      /
                                      (n - 1)                 n (-m)  |
dhydco := psi -> 2 ks (1 - (alpha psi)        (1 + (alpha psi) )    ) |
                                                                      |
                                                                      \

                 (n - 1)                         n (-m)
      (alpha psi)        (n - 1) (1 + (alpha psi) )
    - -------------------------------------------------
                             psi

                  (n - 1)                 n (-m)              n  \
       (alpha psi)        (1 + (alpha psi) )     m (alpha psi)  n|   /
     + ----------------------------------------------------------|  /
                                             n                   | /
                         psi (1 + (alpha psi) )                  /

                    n (m/2)
    (1 + (alpha psi) )

                              (n - 1)                 n (-m) 2              n
           ks (1 - (alpha psi)        (1 + (alpha psi) )    )  m (alpha psi)  n
     - 1/2 --------------------------------------------------------------------
                                      n (m/2)                     n
                      (1 + (alpha psi) )      psi (1 + (alpha psi) )

> ddhydc:=D(dhydco);
                      /             (n - 1)                         n (-m)
                      |  (alpha psi)        (n - 1) (1 + (alpha psi) )
ddhydc := psi -> 2 ks |- -------------------------------------------------
                      |                         psi
                      \

                  (n - 1)                 n (-m)              n  \2
       (alpha psi)        (1 + (alpha psi) )     m (alpha psi)  n|    /
     + ----------------------------------------------------------|   /
                                             n                   |  /
                         psi (1 + (alpha psi) )                  /

                    n (m/2)
    (1 + (alpha psi) )      - 2 ks

                                                    /
                    (n - 1)                 n (-m)  |
    (1 - (alpha psi)        (1 + (alpha psi) )    ) |
                                                    |
                                                    \

                 (n - 1)                         n (-m)
      (alpha psi)        (n - 1) (1 + (alpha psi) )
    - -------------------------------------------------
                             psi

                  (n - 1)                 n (-m)              n  \
       (alpha psi)        (1 + (alpha psi) )     m (alpha psi)  n|
     + ----------------------------------------------------------| m
                                             n                   |
                         psi (1 + (alpha psi) )                  /

               n     /                  n (m/2)                     n
    (alpha psi)  n  /  ((1 + (alpha psi) )      psi (1 + (alpha psi) )) + 2 ks
                   /

                                                    /
                    (n - 1)                 n (-m)  |
    (1 - (alpha psi)        (1 + (alpha psi) )    ) |
                                                    |
                                                    \

                 (n - 1)        2                 n (-m)
      (alpha psi)        (n - 1)  (1 + (alpha psi) )
    - --------------------------------------------------
                                2
                             psi

                  (n - 1)                         n (-m)
       (alpha psi)        (n - 1) (1 + (alpha psi) )
     + -------------------------------------------------
                                2
                             psi

                    (n - 1)                         n (-m)              n
       2 (alpha psi)        (n - 1) (1 + (alpha psi) )     m (alpha psi)  n
     + --------------------------------------------------------------------
                                2                 n
                             psi  (1 + (alpha psi) )

                  (n - 1)                 n (-m)  2             n 2  2
       (alpha psi)        (1 + (alpha psi) )     m  ((alpha psi) )  n
     - ---------------------------------------------------------------
                             2                 n 2
                          psi  (1 + (alpha psi) )

                  (n - 1)                 n (-m)              n  2
       (alpha psi)        (1 + (alpha psi) )     m (alpha psi)  n
     + -----------------------------------------------------------
                            2                 n
                         psi  (1 + (alpha psi) )

                  (n - 1)                 n (-m)              n
       (alpha psi)        (1 + (alpha psi) )     m (alpha psi)  n
     - ----------------------------------------------------------
                           2                 n
                        psi  (1 + (alpha psi) )

                  (n - 1)                 n (-m)               n 2  2\
       (alpha psi)        (1 + (alpha psi) )     m ((alpha psi) )  n |   /
     - --------------------------------------------------------------|  /
                             2                 n 2                   | /
                          psi  (1 + (alpha psi) )                    /

                    n (m/2)
    (1 + (alpha psi) )      + 1/4

                       (n - 1)                 n (-m) 2  2             n 2  2
    ks (1 - (alpha psi)        (1 + (alpha psi) )    )  m  ((alpha psi) )  n
    -------------------------------------------------------------------------
                                n (m/2)    2                 n 2
                (1 + (alpha psi) )      psi  (1 + (alpha psi) )

     -

                           (n - 1)                 n (-m) 2              n  2
        ks (1 - (alpha psi)        (1 + (alpha psi) )    )  m (alpha psi)  n
    1/2 ---------------------------------------------------------------------
                                   n (m/2)    2                 n
                   (1 + (alpha psi) )      psi  (1 + (alpha psi) )

                              (n - 1)                 n (-m) 2              n
           ks (1 - (alpha psi)        (1 + (alpha psi) )    )  m (alpha psi)  n
     + 1/2 --------------------------------------------------------------------
                                     n (m/2)    2                 n
                     (1 + (alpha psi) )      psi  (1 + (alpha psi) )

     + 1/2

                       (n - 1)                 n (-m) 2               n 2  2
    ks (1 - (alpha psi)        (1 + (alpha psi) )    )  m ((alpha psi) )  n
    ------------------------------------------------------------------------
                                n (m/2)    2                 n 2
                (1 + (alpha psi) )      psi  (1 + (alpha psi) )

> 
# volumetric water content and its derivatives
> volcon:=psi->(thetas-thetar)/(1+(alpha*psi)^n)^m + thetar;
                                    thetas - thetar
                 volcon := psi -> ------------------- + thetar
                                                  n m
                                  (1 + (alpha psi) )

> dvolco:=D(volcon);
                                                               n
                                (thetas - thetar) m (alpha psi)  n
         dvolco := psi -> - ------------------------------------------
                                            n m                     n
                            (1 + (alpha psi) )  psi (1 + (alpha psi) )

> ddvolc:=D(dvolco);
                                      2             n 2  2
                   (thetas - thetar) m  ((alpha psi) )  n
ddvolc := psi -> --------------------------------------------
                                 n m    2                 n 2
                 (1 + (alpha psi) )  psi  (1 + (alpha psi) )

                                          n  2
           (thetas - thetar) m (alpha psi)  n
     - -------------------------------------------
                       n m    2                 n
       (1 + (alpha psi) )  psi  (1 + (alpha psi) )

                                          n
           (thetas - thetar) m (alpha psi)  n
     + -------------------------------------------
                       n m    2                 n
       (1 + (alpha psi) )  psi  (1 + (alpha psi) )

                                          n 2  2
          (thetas - thetar) m ((alpha psi) )  n
     + --------------------------------------------
                       n m    2                 n 2
       (1 + (alpha psi) )  psi  (1 + (alpha psi) )

> 
> 
> with(CodeGeneration);
[C, CSharp, Fortran, IntermediateCode, Java, JavaScript, Julia,

    LanguageDefinition, Matlab, Names, Perl, Python, R, Save, Translate,

    VisualBasic]

> 
# Generate code
#
# NOTE: The code will need to be copied into the source file
# manually. Don't forget to add the common block with var names!
#
> Fortran(hydcon,deducetypes=false,defaulttype=float);
memory used=3.5MB, alloc=8.3MB, time=0.13
Warning, procedure/module options ignored
      doubleprecision function hydcon (psi)
        doubleprecision psi
        hydcon = ks * (0.1D1 - (alpha * psi) ** (n - 0.1D1) * (0.1D1 + (
     #alpha * psi) ** n) ** (-m)) ** 2 / (0.1D1 + (alpha * psi) ** n) **
     # (m / 0.2D1)
        return
      end
> Fortran(dhydco,deducetypes=false,defaulttype=float);
Warning, procedure/module options ignored
      doubleprecision function dhydco (psi)
        doubleprecision psi
        dhydco = 0.2D1 * ks * (0.1D1 - (alpha * psi) ** (n - 0.1D1) * (0
     #.1D1 + (alpha * psi) ** n) ** (-m)) / (0.1D1 + (alpha * psi) ** n)
     # ** (m / 0.2D1) * (-(alpha * psi) ** (n - 0.1D1) * (n - 0.1D1) / p
     #si * (0.1D1 + (alpha * psi) ** n) ** (-m) + (alpha * psi) ** (n - 
     #0.1D1) * (0.1D1 + (alpha * psi) ** n) ** (-m) * m * (alpha * psi) 
     #** n * n / psi / (0.1D1 + (alpha * psi) ** n)) - ks * (0.1D1 - (al
     #pha * psi) ** (n - 0.1D1) * (0.1D1 + (alpha * psi) ** n) ** (-m)) 
     #** 2 / (0.1D1 + (alpha * psi) ** n) ** (m / 0.2D1) * m * (alpha * 
     #psi) ** n * n / psi / (0.1D1 + (alpha * psi) ** n) / 0.2D1
        return
      end
> Fortran(ddhydc,optimize=true,deducetypes=false,defaulttype=float);
Warning, procedure/module options ignored
      doubleprecision function ddhydc (psi)
        doubleprecision psi
        doubleprecision t1
        doubleprecision t11
        doubleprecision t12
        doubleprecision t13
        doubleprecision t14
        doubleprecision t18
        doubleprecision t19
        doubleprecision t2
        doubleprecision t22
        doubleprecision t23
        doubleprecision t26
        doubleprecision t27
        doubleprecision t3
        doubleprecision t30
        doubleprecision t36
        doubleprecision t38
        doubleprecision t39
        doubleprecision t4
        doubleprecision t40
        doubleprecision t42
        doubleprecision t47
        doubleprecision t49
        doubleprecision t5
        doubleprecision t50
        doubleprecision t52
        doubleprecision t55
        doubleprecision t58
        doubleprecision t59
        doubleprecision t6
        doubleprecision t61
        doubleprecision t68
        doubleprecision t69
        doubleprecision t7
        doubleprecision t75
        doubleprecision t8
        t1 = alpha * psi
        t2 = n - 0.1D1
        t3 = t1 ** t2
        t4 = t3 * t2
        t5 = 0.1D1 / psi
        t6 = t1 ** n
        t7 = 0.1D1 + t6
        t8 = t7 ** (-m)
        t11 = t3 * t8
        t12 = t11 * m
        t13 = t6 * n
        t14 = 0.1D1 / t7
        t18 = t12 * t13 * t14 * t5 - t4 * t5 * t8
        t19 = t18 ** 2
        t22 = t7 ** (m / 0.2D1)
        t23 = 0.1D1 / t22
        t26 = 0.1D1 - t11
        t27 = ks * t26
        t30 = m * t6
        t36 = t2 ** 2
        t38 = psi ** 2
        t39 = 0.1D1 / t38
        t40 = t39 * t8
        t42 = t4 * t40
        t47 = m ** 2
        t49 = t6 ** 2
        t50 = n ** 2
        t52 = t7 ** 2
        t55 = t49 * t50 * t39 / t52
        t58 = t39 * t14
        t59 = t6 * t50 * t58
        t61 = t13 * t58
        t68 = t26 ** 2
        t69 = ks * t68
        t75 = t69 * t23 * m
        ddhydc = 0.2D1 * ks * t19 * t23 - 0.2D1 * t27 * t23 * t18 * t30 
     #* n * t5 * t14 + 0.2D1 * t27 * t23 * (0.2D1 * n * t14 * t30 * t42 
     #- t11 * t47 * t55 - t3 * t36 * t40 - t12 * t55 + t12 * t59 - t12 *
     # t61 + t42) + t69 * t23 * t47 * t55 / 0.4D1 - t75 * t59 / 0.2D1 + 
     #t75 * t61 / 0.2D1 + t75 * t55 / 0.2D1
        return
      end
> 
> Fortran(volcon,deducetypes=false,defaulttype=float);
Warning, procedure/module options ignored
      doubleprecision function volcon (psi)
        doubleprecision psi
        volcon = (thetas - thetar) / (0.1D1 + (alpha * psi) ** n) ** m +
     # thetar
        return
      end
> Fortran(dvolco,deducetypes=false,defaulttype=float);
Warning, procedure/module options ignored
      doubleprecision function dvolco (psi)
        doubleprecision psi
        dvolco = -(thetas - thetar) / (0.1D1 + (alpha * psi) ** n) ** m 
     #* m * (alpha * psi) ** n * n / psi / (0.1D1 + (alpha * psi) ** n)
        return
      end
> Fortran(ddvolc,optimize=true,deducetypes=false,defaulttype=float);
Warning, procedure/module options ignored
      doubleprecision function ddvolc (psi)
        doubleprecision psi
        doubleprecision t10
        doubleprecision t11
        doubleprecision t13
        doubleprecision t14
        doubleprecision t15
        doubleprecision t18
        doubleprecision t20
        doubleprecision t23
        doubleprecision t3
        doubleprecision t4
        doubleprecision t5
        doubleprecision t7
        doubleprecision t8
        t3 = (alpha * psi) ** n
        t4 = 0.1D1 + t3
        t5 = t4 ** m
        t7 = (thetas - thetar) / t5
        t8 = m ** 2
        t10 = t3 ** 2
        t11 = n ** 2
        t13 = psi ** 2
        t14 = 0.1D1 / t13
        t15 = t4 ** 2
        t18 = t10 * t11 * t14 / t15
        t20 = t7 * m
        t23 = t14 / t4
        ddvolc = n * t20 * t23 * t3 - t11 * t20 * t23 * t3 + t18 * t7 * 
     #t8 + t20 * t18
        return
      end
> quit
memory used=24.4MB, alloc=40.3MB, time=0.45
