    |\^/|     Maple 2016 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2016
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> restart;
> 
# RHS computed by hand. This is for code generation of its Jacobian
> 
# Dynamical quantities theta(z,t) and T(z,t),
# - theta is liquid water content, Temp is temperature
# - thetaz and Tempz represent their derivatives wrt z
# - Unfortunately, dqdz needs to be explicitly put into the RHS equations for the jacobian computation as I've done it.
# - Similar story for Cp
# ns := 1;
> dqdz := ksnow*ns*((theta-thetar)/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar))^(ns-1)*((1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)*thetaz/rhoice-(theta-thetar)*(2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice))/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)^2;
                 /theta - thetar\(ns - 1)
dqdz := ksnow ns |--------------|
                 \      %1      /

    /                                           2                    \
    |%1 thetaz   2 (theta - thetar) rholiq omega  (Tfrz - Temp) Tempz|   /   2
    |--------- - ----------------------------------------------------|  /  %1
    \ rhoice                            rhoice                       / /

                      2              2
%1 := 1 - rholiq omega  (Tfrz - Temp)  - thetar

> 
> dqdz1 := ksnow*((1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)*thetaz/rhoice-(theta-thetar)*(2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice))/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)^2;
               /                 2              2
               |(1 - rholiq omega  (Tfrz - Temp)  - thetar) thetaz
dqdz1 := ksnow |--------------------------------------------------
               \                      rhoice

                                      2                    \
       2 (theta - thetar) rholiq omega  (Tfrz - Temp) Tempz|   /
     - ----------------------------------------------------|  /
                              rhoice                       / /

                     2              2          2
    (1 - rholiq omega  (Tfrz - Temp)  - thetar)

> 
> Cp = ((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq) * theta + rhoair*cair):
> 
#####################################
# NOTE: I manually copied dqdz Cp into these RHS values... This is to avoid some silliness later in the codegen
#######
# RHS1 := (theta,Temp,thetaz,Tempz) -> -(Cp +2*rholiq*Lfus*omega*(Tfrz-Temp)*theta)/(Cp*(1+omega^2*(Tfrz-Temp)^2)) * dqdz;
#
# RHS2 := (theta,Temp,thetaz,Tempz) -> -rholiq*Lfus/Cp * dqdz;
#####################################
> 
> 
> 
> RHS1 := (theta,Temp,thetaz,Tempz) -> -(((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq) * theta + rhoair*cair) +2*rholiq*Lfus*omega*(Tfrz-Temp)*theta)/(((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cipce*omega^2*(Tfrz-Temp)^2 + rholiq*cliq) * theta + rhoair*cair)*(1+omega^2*(Tfrz-Temp)^2)) * ksnow*ns*((theta-thetar)/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar))^(ns-1)*((1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)*thetaz/rhoice-(theta-thetar)*(2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice))/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)^2;
                                          //
                                          ||
RHS1 := (theta, Temp, thetaz, Tempz) -> - ||
                                          \\

                /                2              2\
                |    rholiq omega  (Tfrz - Temp) |
    rhoair cair |1 - ----------------------------|
                \               rhoice           /

                                                      \
                        2              2              |
     + rholiq cice omega  (Tfrz - Temp)  + rholiq cliq| theta + rhoair cair
                                                      /

                                              \
                                              |
     + 2 rholiq Lfus omega (Tfrz - Temp) theta| ksnow ns
                                              /

                                                        /
    /             theta - thetar              \(ns - 1) |
    |-----------------------------------------|         |
    |                2              2         |         \
    \1 - rholiq omega  (Tfrz - Temp)  - thetar/

                     2              2
    (1 - rholiq omega  (Tfrz - Temp)  - thetar) thetaz
    --------------------------------------------------
                          rhoice

                                      2                    \     ///
       2 (theta - thetar) rholiq omega  (Tfrz - Temp) Tempz|   / |||
     - ----------------------------------------------------|  /  |||
                              rhoice                       / /   \\\

                /                2              2\
                |    rholiq omega  (Tfrz - Temp) |
    rhoair cair |1 - ----------------------------|
                \               rhoice           /

                                                       \                    \
                         2              2              |                    |
     + rholiq cipce omega  (Tfrz - Temp)  + rholiq cliq| theta + rhoair cair|
                                                       /                    /

                                                                            \
              2              2                   2              2          2|
    (1 + omega  (Tfrz - Temp) ) (1 - rholiq omega  (Tfrz - Temp)  - thetar) |
                                                                            /

> 
# RHS1 := (theta,Temp,thetaz,Tempz) -> -(((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq) * theta + rhoair*cair) +2*rholiq*Lfus*omega*(Tfrz-Temp)*theta)/(((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cipce*omega^2*(Tfrz-Temp)^2 + rholiq*cliq) * theta + rhoair*cair)*(1+omega^2*(Tfrz-Temp)^2)) * ksnow*((1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)*thetaz/rhoice-(theta-thetar)*(2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice))/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)^2;
> 
> RHS2 := (theta,Temp,thetaz,Tempz) -> -rholiq*Lfus/((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq) * theta + rhoair*cair) * ksnow*ns*((theta-thetar)/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar))^(ns-1)*((1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)*thetaz/rhoice-(theta-thetar)*(2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice))/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)^2;
RHS2 := (theta, Temp, thetaz, Tempz) -> - rholiq Lfus ksnow ns

                                                        /
    /             theta - thetar              \(ns - 1) |
    |-----------------------------------------|         |
    |                2              2         |         \
    \1 - rholiq omega  (Tfrz - Temp)  - thetar/

                     2              2
    (1 - rholiq omega  (Tfrz - Temp)  - thetar) thetaz
    --------------------------------------------------
                          rhoice

                                      2                    \     ///
       2 (theta - thetar) rholiq omega  (Tfrz - Temp) Tempz|   / |||
     - ----------------------------------------------------|  /  |||
                              rhoice                       / /   \\\

                /                2              2\
                |    rholiq omega  (Tfrz - Temp) |
    rhoair cair |1 - ----------------------------|
                \               rhoice           /

                                                      \                    \
                        2              2              |                    |
     + rholiq cice omega  (Tfrz - Temp)  + rholiq cliq| theta + rhoair cair|
                                                      /                    /

                                                \
                     2              2          2|
    (1 - rholiq omega  (Tfrz - Temp)  - thetar) |
                                                /

> 
# RHS2 := (theta,Temp,thetaz,Tempz) -> -rholiq*Lfus/((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq) * theta + rhoair*cair) * ksnow*((1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)*thetaz/rhoice-(theta-thetar)*(2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice))/(1-rholiq*omega^2*(Tfrz-Temp)^2-thetar)^2;
> 
# Generate code
#
# NOTE: The code will need to be copied into the source file
# manually.
# - Don't copy entire subroutine.
# - Convert input vars from Maple names to correct array names.
# - Add the common block with var names.
# - Adjust output array (names and locations)
> 
> with(CodeGeneration);
[C, CSharp, Fortran, IntermediateCode, Java, JavaScript, Julia,

    LanguageDefinition, Matlab, Names, Perl, Python, R, Save, Translate,

    VisualBasic]

> with(codegen);
[C, GRAD, GRADIENT, HESSIAN, JACOBIAN, MathML, cost, declare, dontreturn, eqn,

    fortran, horner, intrep2maple, joinprocs, makeglobal, makeparam, makeproc,

    makevoid, maple2intrep, optimize, packargs, packlocals, packparams,

    prep2trans, renamevar, split, swapargs]

> 
> J := JACOBIAN([RHS1,RHS2]);
memory used=4.0MB, alloc=40.3MB, time=0.17
J := proc(theta, Temp, thetaz, Tempz)
local df, dfr0, grd, t1, t10, t12, t14, t16, t17, t2, t3, t34, t36, t4, t40,
t5, t51, t54, t6;
    t1 := rhoair*cair;
    t2 := omega^2;
    t3 := rholiq*t2;
    t4 := Tfrz - Temp;
    t5 := t4^2;
    t6 := 1/rhoice;
    t10 := t1*(-t3*t5*t6 + 1);
    t12 := t2*t5;
    t14 := rholiq*cliq;
    t16 := (cice*rholiq*t12 + t10 + t14)*theta;
    t17 := rholiq*Lfus;
    t34 := theta - thetar;
    t36 := -t3*t5 - thetar + 1;
    t40 := (t34/t36)^(ns - 1);
    t51 := t36^2;
    t54 := ns*t40*(-2*Tempz*rholiq*t2*t34*t4*t6 + t36*t6*thetaz)/t51;
    df := array(1 .. 10);
    dfr0 := array(1 .. 10);
    df[10] := -(2*omega*t17*t4*theta + t1 + t16)*ksnow/(
        ((cipce*rholiq*t12 + t10 + t14)*theta + t1)*(t12 + 1));
    df[9] :=
        -df[10]*ns*t40*(-2*Tempz*rholiq*t2*t34*t4*t6 + t36*t6*thetaz)/t51^2
        ;
    df[8] := df[10]*ns*(-2*Tempz*rholiq*t2*t34*t4*t6 + t36*t6*thetaz)/t51;
    df[7] := df[10]*ns*t40*t6*thetaz/t51 + 2*df[9]*t36
         - df[8]*(t34/t36)^(ns - 1)*(ns - 1)/t36;
    df[6] := -2*df[10]*ns*t40*Tempz*rholiq*t2*t4*t6/t51
         + df[8]*(t34/t36)^(ns - 1)*(ns - 1)/t34;
    df[5] :=
        -ksnow*t54/(((cipce*rholiq*t12 + t10 + t14)*theta + t1)*(t12 + 1));
    df[4] := df[5]*cice*rholiq*theta + (2*omega*t17*t4*theta + t1 + t16)*
        ksnow*t54*cipce*rholiq*theta/(
        ((cipce*rholiq*t12 + t10 + t14)*theta + t1)^2*(t12 + 1)) +
        (2*omega*t17*t4*theta + t1 + t16)*ksnow*t54/(
        ((cipce*rholiq*t12 + t10 + t14)*theta + t1)*(t12 + 1)^2);
    df[3] := df[5]*theta + (2*omega*t17*t4*theta + t1 + t16)*ksnow*t54*
        theta/(((cipce*rholiq*t12 + t10 + t14)*theta + t1)^2*(t12 + 1));
    df[2] := -t1*t3*t6*df[3] + t2*df[4] - t3*df[7];
    df[1] := -2*df[10]*ns*t40*Tempz*rholiq*t2*t34*t6/t51 + 2*df[2]*t4 - 2*
        omega*t17*theta*ksnow*t54/(
        ((cipce*rholiq*t12 + t10 + t14)*theta + t1)*(t12 + 1));
    dfr0[10] := -t17*ksnow/(t16 + t1);
    dfr0[9] := -dfr0[10]*ns*t40*
        (-2*Tempz*rholiq*t2*t34*t4*t6 + t36*t6*thetaz)/t51^2;
    dfr0[8] :=
        dfr0[10]*ns*(-2*Tempz*rholiq*t2*t34*t4*t6 + t36*t6*thetaz)/t51;
    dfr0[7] := dfr0[10]*ns*t40*t6*thetaz/t51 + 2*dfr0[9]*t36
         - dfr0[8]*(t34/t36)^(ns - 1)*(ns - 1)/t36;
    dfr0[6] := -2*dfr0[10]*ns*t40*Tempz*rholiq*t2*t4*t6/t51
         + dfr0[8]*(t34/t36)^(ns - 1)*(ns - 1)/t34;
    dfr0[5] := t17*ksnow*t54/(t16 + t1)^2;
    dfr0[4] := dfr0[5]*cice*rholiq*theta;
    dfr0[3] := dfr0[5]*theta;
    dfr0[2] := -t1*t3*t6*dfr0[3] + t2*dfr0[4] - t3*dfr0[7];
    dfr0[1] := -2*dfr0[10]*ns*t40*Tempz*rholiq*t2*t34*t6/t51 + 2*dfr0[2]*t4
        ;
    grd := array(1 .. 2, 1 .. 4);
    grd[1, 1] := -2*omega*t17*t4*ksnow*t54/(
        ((cipce*rholiq*t12 + t10 + t14)*theta + t1)*(t12 + 1)) +
        (2*omega*t17*t4*theta + t1 + t16)*ksnow*t54*
        (cipce*rholiq*t12 + t10 + t14)/(
        ((cipce*rholiq*t12 + t10 + t14)*theta + t1)^2*(t12 + 1)) + df[6]
         + df[5]*(cice*rholiq*t12 + t10 + t14);
    grd[1, 2] := -df[1];
    grd[1, 3] := df[10]*ns*t40*t36*t6/t51;
    grd[1, 4] := -2*df[10]*ns*t40*rholiq*t2*t34*t4*t6/t51;
    grd[2, 1] := dfr0[6] + dfr0[5]*(cice*rholiq*t12 + t10 + t14);
    grd[2, 2] := -dfr0[1];
    grd[2, 3] := dfr0[10]*ns*t40*t36*t6/t51;
    grd[2, 4] := -2*dfr0[10]*ns*t40*rholiq*t2*t34*t4*t6/t51;
    return grd
end proc

> 
> Fortran([RHS1(U(1),U(2),UX(1),UX(2)),RHS1(U(1),U(2),UX(1),UX(2))],deducetypes=false,defaulttype=float,optimize=true);
Warning, unable to optimize
Warning, the function names {U, UX} are not recognized in the target language
      cg(1) = -((rhoair * cair * (0.1D1 - rholiq * omega ** 2 * (Tfrz - 
     #U(2)) ** 2 / rhoice) + rholiq * cice * omega ** 2 * (Tfrz - U(2)) 
     #** 2 + rholiq * cliq) * U(1) + rhoair * cair + 0.2D1 * rholiq * Lf
     #us * omega * (Tfrz - U(2)) * U(1)) / ((rhoair * cair * (0.1D1 - rh
     #oliq * omega ** 2 * (Tfrz - U(2)) ** 2 / rhoice) + rholiq * cipce 
     #* omega ** 2 * (Tfrz - U(2)) ** 2 + rholiq * cliq) * U(1) + rhoair
     # * cair) / (0.1D1 + omega ** 2 * (Tfrz - U(2)) ** 2) * ksnow * ns 
     #* ((U(1) - thetar) / (0.1D1 - rholiq * omega ** 2 * (Tfrz - U(2)) 
     #** 2 - thetar)) ** (ns - 0.1D1) * ((0.1D1 - rholiq * omega ** 2 * 
     #(Tfrz - U(2)) ** 2 - thetar) * UX(1) / rhoice - 0.2D1 * (U(1) - th
     #etar) * rholiq * omega ** 2 * (Tfrz - U(2)) * UX(2) / rhoice) / (0
     #.1D1 - rholiq * omega ** 2 * (Tfrz - U(2)) ** 2 - thetar) ** 2
      cg(2) = -((rhoair * cair * (0.1D1 - rholiq * omega ** 2 * (Tfrz - 
     #U(2)) ** 2 / rhoice) + rholiq * cice * omega ** 2 * (Tfrz - U(2)) 
     #** 2 + rholiq * cliq) * U(1) + rhoair * cair + 0.2D1 * rholiq * Lf
     #us * omega * (Tfrz - U(2)) * U(1)) / ((rhoair * cair * (0.1D1 - rh
     #oliq * omega ** 2 * (Tfrz - U(2)) ** 2 / rhoice) + rholiq * cipce 
     #* omega ** 2 * (Tfrz - U(2)) ** 2 + rholiq * cliq) * U(1) + rhoair
     # * cair) / (0.1D1 + omega ** 2 * (Tfrz - U(2)) ** 2) * ksnow * ns 
     #* ((U(1) - thetar) / (0.1D1 - rholiq * omega ** 2 * (Tfrz - U(2)) 
     #** 2 - thetar)) ** (ns - 0.1D1) * ((0.1D1 - rholiq * omega ** 2 * 
     #(Tfrz - U(2)) ** 2 - thetar) * UX(1) / rhoice - 0.2D1 * (U(1) - th
     #etar) * rholiq * omega ** 2 * (Tfrz - U(2)) * UX(2) / rhoice) / (0
     #.1D1 - rholiq * omega ** 2 * (Tfrz - U(2)) ** 2 - thetar) ** 2
> Fortran(J,deducetypes=false,defaulttype=float,optimize=true);
Warning, cannot resolve types, reassigning df's type
Warning, cannot resolve types, reassigning dfr0's type
Warning, cannot resolve types, reassigning grd's type
      subroutine J (theta, Temp, thetaz, Tempz, cgret)
        doubleprecision theta
        doubleprecision Temp
        doubleprecision thetaz
        doubleprecision Tempz
        doubleprecision cgret(2,4)
        doubleprecision df(10)
        doubleprecision dfr0(10)
        doubleprecision grd(2,4)
        doubleprecision t1
        doubleprecision t10
        doubleprecision t102
        doubleprecision t107
        doubleprecision t115
        doubleprecision t12
        doubleprecision t122
        doubleprecision t127
        doubleprecision t129
        doubleprecision t135
        doubleprecision t137
        doubleprecision t14
        doubleprecision t141
        doubleprecision t144
        doubleprecision t15
        doubleprecision t16
        doubleprecision t166
        doubleprecision t167
        doubleprecision t17
        doubleprecision t170
        doubleprecision t18
        doubleprecision t2
        doubleprecision t20
        doubleprecision t3
        doubleprecision t30
        doubleprecision t31
        doubleprecision t32
        doubleprecision t33
        doubleprecision t34
        doubleprecision t36
        doubleprecision t39
        doubleprecision t4
        doubleprecision t40
        doubleprecision t43
        doubleprecision t45
        doubleprecision t46
        doubleprecision t47
        doubleprecision t48
        doubleprecision t49
        doubleprecision t5
        doubleprecision t50
        doubleprecision t51
        doubleprecision t54
        doubleprecision t55
        doubleprecision t57
        doubleprecision t59
        doubleprecision t6
        doubleprecision t61
        doubleprecision t63
        doubleprecision t69
        doubleprecision t7
        doubleprecision t70
        doubleprecision t72
        doubleprecision t73
        doubleprecision t75
        doubleprecision t76
        doubleprecision t80
        doubleprecision t83
        doubleprecision t84
        doubleprecision t85
        doubleprecision t87
        doubleprecision t89
        doubleprecision t91
        doubleprecision t96
        t1 = rhoair * cair
        t2 = omega ** 2
        t3 = rholiq * t2
        t4 = Tfrz - Temp
        t5 = t4 ** 2
        t6 = 0.1D1 / rhoice
        t7 = t3 * t5
        t10 = t1 * (-t6 * t7 + 0.1D1)
        t12 = t2 * t5
        t14 = rholiq * cliq
        t15 = cice * rholiq * t12 + t10 + t14
        t16 = t15 * theta
        t17 = rholiq * Lfus
        t34 = theta - thetar
        t36 = -t7 - thetar + 0.1D1
        t18 = 0.1D1 / t36
        t20 = ns - 0.1D1
        t40 = (t34 * t18) ** t20
        t51 = t36 ** 2
        t30 = -0.2D1 * Tempz * rholiq * t2 * t34 * t4 * t6 + t36 * t6 * 
     #thetaz
        t31 = 0.1D1 / t51
        t32 = t30 * t31
        t54 = ns * t40 * t32
        t33 = t17 * omega
        t39 = 0.2D1 * t33 * t4 * theta + t1 + t16
        t43 = cipce * rholiq * t12 + t10 + t14
        t45 = t43 * theta + t1
        t46 = 0.1D1 / t45
        t47 = t39 * t46
        t48 = 0.1D1 + t12
        t49 = 0.1D1 / t48
        t50 = t49 * ksnow
        df(10) = -t47 * t50
        t55 = df(10) * ns
        t57 = t51 ** 2
        t59 = t40 * t30 / t57
        df(9) = -t55 * t59
        df(8) = t55 * t32
        t61 = t55 * t40
        t63 = t6 * thetaz * t31
        t69 = df(8) * t40
        t70 = t20 * t18
        df(7) = 0.2D1 * t36 * df(9) + t61 * t63 - t69 * t70
        t72 = t40 * Tempz
        t73 = t55 * t72
        t75 = t4 * t6 * t31
        t76 = t3 * t75
        t80 = t20 / t34
        df(6) = t69 * t80 - 0.2D1 * t73 * t76
        t83 = ksnow * t54
        t84 = t46 * t49 * t83
        df(5) = -t84
        t85 = df(5)
        t87 = rholiq * theta
        t89 = t45 ** 2
        t91 = t39 / t89
        t96 = t48 ** 2
        df(4) = t85 * cice * t87 + t91 * t50 * t54 * cipce * t87 + t47 /
     # t96 * ksnow * t54
        t102 = t91 * t49
        df(3) = t102 * t83 * theta + t85 * theta
        t107 = t3 * t6
        df(2) = -t1 * t107 * df(3) + t2 * df(4) - t3 * df(7)
        t115 = t3 * t34 * t6 * t31
        df(1) = -0.2D1 * t33 * t84 * theta - 0.2D1 * t115 * t73 + 0.2D1 
     #* t4 * df(2)
        t122 = t16 + t1
        dfr0(10) = -t17 / t122 * ksnow
        t127 = dfr0(10) * ns
        dfr0(9) = -t127 * t59
        dfr0(8) = t127 * t32
        t129 = t127 * t40
        t135 = dfr0(8) * t40
        dfr0(7) = t129 * t63 - t135 * t70 + 0.2D1 * t36 * dfr0(9)
        t137 = t127 * t72
        dfr0(6) = t135 * t80 - 0.2D1 * t137 * t76
        t141 = t122 ** 2
        dfr0(5) = t17 / t141 * t83
        t144 = dfr0(5)
        dfr0(4) = t144 * cice * t87
        dfr0(3) = t144 * theta
        dfr0(2) = -t1 * t107 * dfr0(3) + t2 * dfr0(4) - t3 * dfr0(7)
        dfr0(1) = -0.2D1 * t115 * t137 + 0.2D1 * t4 * dfr0(2)
        grd(1,1) = t102 * t43 * t83 - 0.2D1 * t33 * t4 * t84 + t15 * t85
     # + df(6)
        grd(1,2) = -df(1)
        t166 = t36 * t6 * t31
        grd(1,3) = t61 * t166
        t167 = t40 * rholiq
        t170 = t2 * t34 * t75
        grd(1,4) = -0.2D1 * t55 * t167 * t170
        grd(2,1) = t144 * t15 + dfr0(6)
        grd(2,2) = -dfr0(1)
        grd(2,3) = t129 * t166
        grd(2,4) = -0.2D1 * t127 * t167 * t170
        cgret(1,1) = grd(1,1)
        cgret(1,2) = grd(1,2)
        cgret(1,3) = grd(1,3)
        cgret(1,4) = grd(1,4)
        cgret(2,1) = grd(2,1)
        cgret(2,2) = grd(2,2)
        cgret(2,3) = grd(2,3)
        cgret(2,4) = grd(2,4)
      end
> quit
memory used=23.2MB, alloc=40.3MB, time=0.49
