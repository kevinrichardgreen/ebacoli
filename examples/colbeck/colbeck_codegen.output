    |\^/|     Maple 2016 (X86 64 LINUX)
._|\|   |/|_. Copyright (c) Maplesoft, a division of Waterloo Maple Inc. 2016
 \  MAPLE  /  All rights reserved. Maple is a trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
> restart;
> 
# RHS computed by hand. This is for code generation of its Jacobian
> 
# Dynamical quantities theta(z,t) and T(z,t),
# - theta is liquid water content, Temp is temperature
# - thetaz and Tempz represent their derivatives wrt z
# - Unfortunately, dqdz needs to be explicitly put into the RHS equations for the jacobian computation as I've done it.
# - Similar story for Cp
> dqdz := (ksnow*ns*((theta-thetar)/(1-rholiq*omega^2*(Tfrz-Temp)^2*theta-thetar))^(ns-1)*((1-rholiq*omega^2*(Tfrz-Temp)^2*theta/rhoice-thetar)*thetaz-(theta-thetar)*((2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice)+(Tfrz-T)^2*thetaz))/(1-rholiq*omega^2*(Tfrz-Temp)^2*theta-thetar)^2);
                                                                           /
                 /                theta - thetar                 \(ns - 1) |
dqdz := ksnow ns |-----------------------------------------------|         |
                 |                2              2               |         \
                 \1 - rholiq omega  (Tfrz - Temp)  theta - thetar/

    /                2              2               \
    |    rholiq omega  (Tfrz - Temp)  theta         |
    |1 - ---------------------------------- - thetar| thetaz -
    \                  rhoice                       /

                     /              2                                         \
                     |2 rholiq omega  (Tfrz - Temp) Tempz             2       |
    (theta - thetar) |----------------------------------- + (Tfrz - T)  thetaz|
                     \              rhoice                                    /

    \
    |   /                  2              2                2
    |  /  (1 - rholiq omega  (Tfrz - Temp)  theta - thetar)
    / /

> 
> Cp = ((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq)*theta + rhoair*cair):
> 
#####################################
# NOTE: I manually copied dqdz and Cp into these RHS values... This is to avoid some silliness later in the codegen
#######
# RHS1 := (theta,Temp,thetaz,Tempz) -> -(Cp +2*rholiq*Lfus*omega*(Tfrz-Temp)*theta)/(Cp*(1+omega^2*(Tfrz-Temp)^2)) * dqdz;
#
# RHS2 := (theta,Temp,thetaz,Tempz) -> -rholiq*Lfus/Cp * dqdz;
#####################################
> 
> RHS1 := (theta,Temp,thetaz,Tempz) -> -(((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq)*theta + rhoair*cair) +2*rholiq*Lfus*omega*(Tfrz-Temp)*theta)/(((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq)*theta + rhoair*cair)*(1+omega^2*(Tfrz-Temp)^2)) * (ksnow*ns*((theta-thetar)/(1-rholiq*omega^2*(Tfrz-Temp)^2*theta-thetar))^(ns-1)*((1-rholiq*omega^2*(Tfrz-Temp)^2*theta/rhoice-thetar)*thetaz-(theta-thetar)*((2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice)+(Tfrz-T)^2*thetaz))/(1-rholiq*omega^2*(Tfrz-Temp)^2*theta-thetar)^2);
                                          //
                                          ||
RHS1 := (theta, Temp, thetaz, Tempz) -> - ||
                                          \\

                /                2              2\
                |    rholiq omega  (Tfrz - Temp) |
    rhoair cair |1 - ----------------------------|
                \               rhoice           /

                                                      \
                        2              2              |
     + rholiq cice omega  (Tfrz - Temp)  + rholiq cliq| theta + rhoair cair
                                                      /

                                              \
                                              |
     + 2 rholiq Lfus omega (Tfrz - Temp) theta| ksnow ns
                                              /

                                                              /
    /                theta - thetar                 \(ns - 1) |
    |-----------------------------------------------|         |
    |                2              2               |         \
    \1 - rholiq omega  (Tfrz - Temp)  theta - thetar/

    /                2              2               \
    |    rholiq omega  (Tfrz - Temp)  theta         |
    |1 - ---------------------------------- - thetar| thetaz -
    \                  rhoice                       /

                     /              2                                         \
                     |2 rholiq omega  (Tfrz - Temp) Tempz             2       |
    (theta - thetar) |----------------------------------- + (Tfrz - T)  thetaz|
                     \              rhoice                                    /

    \     ///            /                2              2\
    |   / |||            |    rholiq omega  (Tfrz - Temp) |
    |  /  |||rhoair cair |1 - ----------------------------|
    / /   \\\            \               rhoice           /

                                                      \                    \
                        2              2              |                    |
     + rholiq cice omega  (Tfrz - Temp)  + rholiq cliq| theta + rhoair cair|
                                                      /                    /

              2              2
    (1 + omega  (Tfrz - Temp) )

                                                      \
                     2              2                2|
    (1 - rholiq omega  (Tfrz - Temp)  theta - thetar) |
                                                      /

> 
> RHS2 := (theta,Temp,thetaz,Tempz) -> -rholiq*Lfus/((rhoair*cair*(1-rholiq*omega^2*(Tfrz-Temp)^2/rhoice) + rholiq*cice*omega^2*(Tfrz-Temp)^2 + rholiq*cliq)*theta + rhoair*cair) * (ksnow*ns*((theta-thetar)/(1-rholiq*omega^2*(Tfrz-Temp)^2*theta-thetar))^(ns-1)*((1-rholiq*omega^2*(Tfrz-Temp)^2*theta/rhoice-thetar)*thetaz-(theta-thetar)*((2*rholiq*omega^2*(Tfrz-Temp)*Tempz/rhoice)+(Tfrz-T)^2*thetaz))/(1-rholiq*omega^2*(Tfrz-Temp)^2*theta-thetar)^2);
RHS2 := (theta, Temp, thetaz, Tempz) -> - rholiq Lfus ksnow ns

                                                              /
    /                theta - thetar                 \(ns - 1) |
    |-----------------------------------------------|         |
    |                2              2               |         \
    \1 - rholiq omega  (Tfrz - Temp)  theta - thetar/

    /                2              2               \
    |    rholiq omega  (Tfrz - Temp)  theta         |
    |1 - ---------------------------------- - thetar| thetaz -
    \                  rhoice                       /

                     /              2                                         \
                     |2 rholiq omega  (Tfrz - Temp) Tempz             2       |
    (theta - thetar) |----------------------------------- + (Tfrz - T)  thetaz|
                     \              rhoice                                    /

    \     ///            /                2              2\
    |   / |||            |    rholiq omega  (Tfrz - Temp) |
    |  /  |||rhoair cair |1 - ----------------------------|
    / /   \\\            \               rhoice           /

                                                      \                    \
                        2              2              |                    |
     + rholiq cice omega  (Tfrz - Temp)  + rholiq cliq| theta + rhoair cair|
                                                      /                    /

                                                      \
                     2              2                2|
    (1 - rholiq omega  (Tfrz - Temp)  theta - thetar) |
                                                      /

> 
# Generate code
#
# NOTE: The code will need to be copied into the source file
# manually.
# - Don't copy entire subroutine.
# - Convert input vars from Maple names to correct array names.
# - Add the common block with var names.
# - Adjust output array (names and locations)
> 
> with(CodeGeneration);
[C, CSharp, Fortran, IntermediateCode, Java, JavaScript, Julia,

    LanguageDefinition, Matlab, Names, Perl, Python, R, Save, Translate,

    VisualBasic]

> with(codegen);
[C, GRAD, GRADIENT, HESSIAN, JACOBIAN, MathML, cost, declare, dontreturn, eqn,

    fortran, horner, intrep2maple, joinprocs, makeglobal, makeparam, makeproc,

    makevoid, maple2intrep, optimize, packargs, packlocals, packparams,

    prep2trans, renamevar, split, swapargs]

> 
> J := JACOBIAN([RHS1,RHS2]);
J := proc(theta, Temp, thetaz, Tempz)
local df, dfr0, grd, t1, t12, t16, t17, t2, t24, t3, t30, t31, t33, t37, t4,
t48, t5, t53, t56, t6;
    t1 := rhoair*cair;
    t2 := omega^2;
    t3 := rholiq*t2;
    t4 := Tfrz - Temp;
    t5 := t4^2;
    t6 := 1/rhoice;
    t12 := t2*t5;
    t16 := (t1*(-t3*t5*t6 + 1) + rholiq*cice*t12 + rholiq*cliq)*theta;
    t17 := rholiq*Lfus;
    t24 := 1/(t16 + t1);
    t30 := theta - thetar;
    t31 := t5*theta;
    t33 := -t3*t31 - thetar + 1;
    t37 := (t30/t33)^(ns - 1);
    t48 := (Tfrz - T)^2;
    t53 := t33^2;
    t56 := ns*t37*((-t3*t31*t6 - thetar + 1)*thetaz
         - t30*(2*Tempz*t3*t4*t6 + t48*thetaz))/t53;
    df := array(1 .. 11);
    dfr0 := array(1 .. 11);
    df[11] := -(2*omega*t17*t4*theta + t1 + t16)*t24*ksnow/(1 + t12);
    df[10] := -df[11]*ns*t37*((-t3*t31*t6 - thetar + 1)*thetaz
         - t30*(2*Tempz*t3*t4*t6 + t48*thetaz))/t53^2;
    df[9] := df[11]*ns*((-t3*t31*t6 - thetar + 1)*thetaz
         - t30*(2*Tempz*t3*t4*t6 + t48*thetaz))/t53;
    df[8] := 2*df[10]*t33 - df[9]*(t30/t33)^(ns - 1)*(ns - 1)/t33;
    df[7] := -df[11]*ns*t37*t3*t6*thetaz/t53 - df[8]*t3;
    df[6] := df[11]*ns*t37*(-2*Tempz*t3*t4*t6 - t48*thetaz)/t53
         + df[9]*(t30/t33)^(ns - 1)*(ns - 1)/t30;
    df[5] := -(2*omega*t17*t4*theta + t1 + t16)*ksnow*t56/(1 + t12);
    df[4] := -df[5]/(t16 + t1)^2 - t24*ksnow*t56/(1 + t12);
    df[3] := df[4]*rholiq*cice*theta
         + (2*omega*t17*t4*theta + t1 + t16)*t24*ksnow*t56/(1 + t12)^2;
    df[2] := -t1*t3*t6*theta*df[4] + t2*df[3] + theta*df[7];
    df[1] := -2*df[11]*ns*t37*t30*Tempz*t3*t6/t53 + 2*df[2]*t4
         - 2*omega*t17*theta*t24*ksnow*t56/(1 + t12);
    dfr0[11] := -t17*t24*ksnow;
    dfr0[10] := -dfr0[11]*ns*t37*((-t3*t31*t6 - thetar + 1)*thetaz
         - t30*(2*Tempz*t3*t4*t6 + t48*thetaz))/t53^2;
    dfr0[9] := dfr0[11]*ns*((-t3*t31*t6 - thetar + 1)*thetaz
         - t30*(2*Tempz*t3*t4*t6 + t48*thetaz))/t53;
    dfr0[8] := 2*dfr0[10]*t33 - dfr0[9]*(t30/t33)^(ns - 1)*(ns - 1)/t33;
    dfr0[7] := -dfr0[11]*ns*t37*t3*t6*thetaz/t53 - dfr0[8]*t3;
    dfr0[6] := dfr0[11]*ns*t37*(-2*Tempz*t3*t4*t6 - t48*thetaz)/t53
         + dfr0[9]*(t30/t33)^(ns - 1)*(ns - 1)/t30;
    dfr0[5] := -t17*ksnow*t56;
    dfr0[4] := -dfr0[5]/(t16 + t1)^2;
    dfr0[3] := dfr0[4]*rholiq*cice*theta;
    dfr0[2] := -t1*t3*t6*theta*dfr0[4] + t2*dfr0[3] + theta*dfr0[7];
    dfr0[1] := -2*dfr0[11]*ns*t37*t30*Tempz*t3*t6/t53 + 2*dfr0[2]*t4;
    grd := array(1 .. 2, 1 .. 4);
    grd[1, 1] := -2*omega*t17*t4*t24*ksnow*t56/(1 + t12) + df[7]*t5 + df[6]
         + df[4]*(t1*(-t3*t5*t6 + 1) + rholiq*cice*t12 + rholiq*cliq);
    grd[1, 2] := -df[1];
    grd[1, 3] := df[11]*ns*t37*(-t3*t31*t6 - t30*t48 - thetar + 1)/t53;
    grd[1, 4] := -2*df[11]*ns*t37*t30*t3*t4*t6/t53;
    grd[2, 1] := dfr0[7]*t5 + dfr0[6]
         + dfr0[4]*(t1*(-t3*t5*t6 + 1) + rholiq*cice*t12 + rholiq*cliq);
    grd[2, 2] := -dfr0[1];
    grd[2, 3] := dfr0[11]*ns*t37*(-t3*t31*t6 - t30*t48 - thetar + 1)/t53;
    grd[2, 4] := -2*dfr0[11]*ns*t37*t30*t3*t4*t6/t53;
    return grd
end proc

> 
> Fortran([RHS1(U(1),U(2),UX(1),UX(2)),RHS1(U(1),U(2),UX(1),UX(2))],deducetypes=false,defaulttype=float,optimize=true);
Warning, unable to optimize
Warning, the function names {U, UX} are not recognized in the target language
      cg(1) = -((rhoair * cair * (0.1D1 - rholiq * omega ** 2 * (Tfrz - 
     #U(2)) ** 2 / rhoice) + rholiq * cice * omega ** 2 * (Tfrz - U(2)) 
     #** 2 + rholiq * cliq) * U(1) + rhoair * cair + 0.2D1 * rholiq * Lf
     #us * omega * (Tfrz - U(2)) * U(1)) / ((rhoair * cair * (0.1D1 - rh
     #oliq * omega ** 2 * (Tfrz - U(2)) ** 2 / rhoice) + rholiq * cice *
     # omega ** 2 * (Tfrz - U(2)) ** 2 + rholiq * cliq) * U(1) + rhoair 
     #* cair) / (0.1D1 + omega ** 2 * (Tfrz - U(2)) ** 2) * ksnow * ns *
     # ((U(1) - thetar) / (0.1D1 - rholiq * omega ** 2 * (Tfrz - U(2)) *
     #* 2 * U(1) - thetar)) ** (ns - 0.1D1) * ((0.1D1 - rholiq * omega *
     #* 2 * (Tfrz - U(2)) ** 2 * U(1) / rhoice - thetar) * UX(1) - (U(1)
     # - thetar) * (0.2D1 * rholiq * omega ** 2 * (Tfrz - U(2)) * UX(2) 
     #/ rhoice + (Tfrz - T) ** 2 * UX(1))) / (0.1D1 - rholiq * omega ** 
     #2 * (Tfrz - U(2)) ** 2 * U(1) - thetar) ** 2
      cg(2) = -((rhoair * cair * (0.1D1 - rholiq * omega ** 2 * (Tfrz - 
     #U(2)) ** 2 / rhoice) + rholiq * cice * omega ** 2 * (Tfrz - U(2)) 
     #** 2 + rholiq * cliq) * U(1) + rhoair * cair + 0.2D1 * rholiq * Lf
     #us * omega * (Tfrz - U(2)) * U(1)) / ((rhoair * cair * (0.1D1 - rh
     #oliq * omega ** 2 * (Tfrz - U(2)) ** 2 / rhoice) + rholiq * cice *
     # omega ** 2 * (Tfrz - U(2)) ** 2 + rholiq * cliq) * U(1) + rhoair 
     #* cair) / (0.1D1 + omega ** 2 * (Tfrz - U(2)) ** 2) * ksnow * ns *
     # ((U(1) - thetar) / (0.1D1 - rholiq * omega ** 2 * (Tfrz - U(2)) *
     #* 2 * U(1) - thetar)) ** (ns - 0.1D1) * ((0.1D1 - rholiq * omega *
     #* 2 * (Tfrz - U(2)) ** 2 * U(1) / rhoice - thetar) * UX(1) - (U(1)
     # - thetar) * (0.2D1 * rholiq * omega ** 2 * (Tfrz - U(2)) * UX(2) 
     #/ rhoice + (Tfrz - T) ** 2 * UX(1))) / (0.1D1 - rholiq * omega ** 
     #2 * (Tfrz - U(2)) ** 2 * U(1) - thetar) ** 2
> Fortran(J,deducetypes=false,defaulttype=float,optimize=true);
Warning, cannot resolve types, reassigning df's type
Warning, cannot resolve types, reassigning dfr0's type
Warning, cannot resolve types, reassigning grd's type
      subroutine J (theta, Temp, thetaz, Tempz, cgret)
        doubleprecision theta
        doubleprecision Temp
        doubleprecision thetaz
        doubleprecision Tempz
        doubleprecision cgret(2,4)
        doubleprecision df(11)
        doubleprecision dfr0(11)
        doubleprecision grd(2,4)
        doubleprecision t1
        doubleprecision t103
        doubleprecision t107
        doubleprecision t109
        doubleprecision t110
        doubleprecision t112
        doubleprecision t113
        doubleprecision t12
        doubleprecision t123
        doubleprecision t129
        doubleprecision t141
        doubleprecision t147
        doubleprecision t149
        doubleprecision t15
        doubleprecision t16
        doubleprecision t164
        doubleprecision t165
        doubleprecision t17
        doubleprecision t18
        doubleprecision t19
        doubleprecision t2
        doubleprecision t20
        doubleprecision t22
        doubleprecision t24
        doubleprecision t26
        doubleprecision t29
        doubleprecision t3
        doubleprecision t30
        doubleprecision t33
        doubleprecision t37
        doubleprecision t38
        doubleprecision t4
        doubleprecision t40
        doubleprecision t41
        doubleprecision t42
        doubleprecision t43
        doubleprecision t47
        doubleprecision t48
        doubleprecision t49
        doubleprecision t5
        doubleprecision t50
        doubleprecision t51
        doubleprecision t53
        doubleprecision t56
        doubleprecision t57
        doubleprecision t59
        doubleprecision t6
        doubleprecision t61
        doubleprecision t67
        doubleprecision t68
        doubleprecision t71
        doubleprecision t73
        doubleprecision t79
        doubleprecision t82
        doubleprecision t85
        doubleprecision t88
        doubleprecision t89
        doubleprecision t92
        doubleprecision t93
        doubleprecision t95
        doubleprecision t97
        t1 = rhoair * cair
        t2 = omega ** 2
        t3 = rholiq * t2
        t4 = Tfrz - Temp
        t5 = t4 ** 2
        t6 = 0.1D1 / rhoice
        t12 = t2 * t5
        t15 = t1 * (-t3 * t5 * t6 + 0.1D1) + rholiq * cice * t12 + rholi
     #q * cliq
        t16 = t15 * theta
        t17 = rholiq * Lfus
        t18 = t16 + t1
        t24 = 0.1D1 / t18
        t30 = theta - thetar
        t19 = t3 * t5 * theta
        t33 = -t19 - thetar + 0.1D1
        t20 = 0.1D1 / t33
        t22 = ns - 0.1D1
        t37 = (t30 * t20) ** t22
        t48 = (Tfrz - T) ** 2
        t53 = t33 ** 2
        t26 = t19 * t6
        t29 = t3 * t4
        t38 = 0.2D1 * Tempz * t29 * t6 + t48 * thetaz
        t40 = (-t26 - thetar + 0.1D1) * thetaz - t30 * t38
        t41 = 0.1D1 / t53
        t42 = t40 * t41
        t56 = ns * t37 * t42
        t43 = t17 * omega
        t47 = 0.2D1 * t4 * t43 * theta + t1 + t16
        t49 = t47 * t24
        t50 = 0.1D1 + t12
        t51 = 0.1D1 / t50
        df(11) = -t49 * t51 * ksnow
        t57 = df(11) * ns
        t59 = t53 ** 2
        t61 = t37 * t40 / t59
        df(10) = -t57 * t61
        df(9) = t57 * t42
        t67 = df(9) * t37
        t68 = t22 * t20
        df(8) = 0.2D1 * t33 * df(10) - t67 * t68
        t71 = t3 * t6
        t73 = t71 * thetaz * t41
        df(7) = -t37 * t57 * t73 - t3 * df(8)
        t79 = -t37 * t38 * t41
        t82 = t22 / t30
        df(6) = t57 * t79 + t67 * t82
        t85 = ksnow * t56
        df(5) = -t47 * t51 * t85
        t88 = t18 ** 2
        t89 = 0.1D1 / t88
        t92 = t24 * t51 * t85
        df(4) = -t89 * df(5) - t92
        t93 = df(4)
        t95 = cice * theta
        t97 = t50 ** 2
        df(3) = t93 * rholiq * t95 + t49 / t97 * ksnow * t56
        t103 = t71 * theta
        t107 = df(7)
        df(2) = -t1 * t103 * t93 + t107 * theta + t2 * df(3)
        t109 = t37 * t30
        t110 = t57 * t109
        t112 = t6 * t41
        t113 = Tempz * t3 * t112
        df(1) = -0.2D1 * t43 * t92 * theta - 0.2D1 * t110 * t113 + 0.2D1
     # * t4 * df(2)
        dfr0(11) = -t17 * t24 * ksnow
        t123 = dfr0(11) * ns
        dfr0(10) = -t123 * t61
        dfr0(9) = t123 * t42
        t129 = dfr0(9) * t37
        dfr0(8) = -t129 * t68 + 0.2D1 * t33 * dfr0(10)
        dfr0(7) = -t123 * t37 * t73 - t3 * dfr0(8)
        dfr0(6) = t123 * t79 + t129 * t82
        dfr0(5) = -t17 * ksnow * t56
        dfr0(4) = -dfr0(5) * t89
        t141 = dfr0(4)
        dfr0(3) = t141 * rholiq * t95
        t147 = dfr0(7)
        dfr0(2) = -t1 * t103 * t141 + t147 * theta + t2 * dfr0(3)
        t149 = t123 * t109
        dfr0(1) = -0.2D1 * t113 * t149 + 0.2D1 * t4 * dfr0(2)
        grd(1,1) = -0.2D1 * t4 * t43 * t92 + t107 * t5 + t15 * t93 + df(
     #6)
        grd(1,2) = -df(1)
        t164 = t37 * (-t30 * t48 - t26 - thetar + 0.1D1) * t41
        grd(1,3) = t57 * t164
        t165 = t29 * t112
        grd(1,4) = -0.2D1 * t110 * t165
        grd(2,1) = t141 * t15 + t147 * t5 + dfr0(6)
        grd(2,2) = -dfr0(1)
        grd(2,3) = t123 * t164
        grd(2,4) = -0.2D1 * t149 * t165
        cgret(1,1) = grd(1,1)
        cgret(1,2) = grd(1,2)
        cgret(1,3) = grd(1,3)
        cgret(1,4) = grd(1,4)
        cgret(2,1) = grd(2,1)
        cgret(2,2) = grd(2,2)
        cgret(2,3) = grd(2,3)
        cgret(2,4) = grd(2,4)
      end
> quit
memory used=23.7MB, alloc=40.3MB, time=0.45
